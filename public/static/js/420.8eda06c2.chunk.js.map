{"version":3,"file":"static/js/420.8eda06c2.chunk.js","mappings":"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","sources":["shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js","shared/components/FormElements/Button.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/http-hook.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport './Map.css';\r\n\r\nconst Map = props => {\r\n    return <div className={`map ${props.className}`} style={props.style}></div>\r\n};\r\n\r\nexport default Map; ","import React, { useContext, useState } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Modal from '../../shared/components/UIElements/Modal';\r\n\r\nimport Map from '../../shared/components/UIElements/Map';\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nimport './PlaceItem.css';\r\n\r\nconst PlaceItem = props => {\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const auth = useContext(AuthContext);\r\n    const [showMap, setShowMap] = useState(false);\r\n    // delete confirmation modal\r\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n    const openMapHandler = () => setShowMap(true);\r\n\r\n    const closeMapHandler = () => setShowMap(false);\r\n\r\n    const showDeleteWarningHandler = () => setShowConfirmModal(true);\r\n\r\n    const cancelDeleteHandler = () => setShowConfirmModal(false);\r\n\r\n    //lect 160\r\n    const confirmDeleteHandler = async () => {\r\n        setShowConfirmModal(false);\r\n        try {\r\n            //Why is sendRequest(...) before props.onDelete(props.id)? Because: Ensures deletion on the server before updating UI\r\n            await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\r\n                'DELETE',\r\n                //no body is attched to request, that's why null\r\n                null,\r\n                {\r\n                    Authorization:'Bearer ' + auth.token\r\n                }\r\n            );\r\n            props.onDelete(props.id);\r\n        } catch (err) { }\r\n    };\r\n\r\n\r\n    console.log('auth.userId:', auth.userId);\r\nconsole.log('props.creatorId:', props.creatorId);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError}/>\r\n            <Modal\r\n                show={showMap}\r\n                onCancel={closeMapHandler}\r\n                header={props.address}\r\n                contentClass='place-item__modal-content'\r\n                footerClass='place-item__modal-actions'\r\n                footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n            >\r\n                <div className='map-container'>\r\n                    <Map />\r\n                </div>\r\n            </Modal>\r\n            <Modal\r\n                show={showConfirmModal}\r\n                onCancel={cancelDeleteHandler}\r\n                header=\"Are you sure?\"\r\n                footerClass=\"place-item__modal-actions\"\r\n                footer={\r\n                    <>\r\n                        <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button>\r\n                        <Button danger onClick={confirmDeleteHandler}>DELETE</Button>\r\n                    </>\r\n                }\r\n            >\r\n                <p>Do you want to proceed and delete this place?</p>\r\n            </Modal>\r\n            <li className=\"place-item\">\r\n                <Card className=\"place-item__content\">\r\n                    {isLoading && <LoadingSpinner asOverlay/>}\r\n                    <div className=\"place-item__image\">\r\n                        <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\r\n                    </div>\r\n                    <div className=\"place-item__info\">\r\n                        <h2>{props.title}</h2>\r\n                        <h3>{props.address}</h3>\r\n                        <p>{props.description}</p>\r\n                    </div>\r\n                    <div className=\"place-item__actions\">\r\n                        <Button inverse onClick={openMapHandler}>SHOW ON MAP</Button>\r\n                        {auth.userId === props.creatorId && <Button to={`/places/${props.id}`}>EDIT</Button>}\r\n                        {auth.userId === props.creatorId && <Button danger onClick={showDeleteWarningHandler}>DELETE</Button>}\r\n                    </div>\r\n                </Card>\r\n            </li>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default PlaceItem;","import React from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport PlaceItem from \"./PlaceItem\";\r\nimport \"./PlaceList.css\";\r\nimport Button from '../../shared/components/FormElements/Button'\r\n\r\nconst PlaceList = props => {\r\n    if (props.items.length === 0) {\r\n        return (\r\n            <div className=\"place-list center\">\r\n                <Card>\r\n                    <h2>No Places found</h2>\r\n                    <Button to=\"/places/new\">Share Place</Button>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <ul className=\"place-list\">\r\n        {props.items.map(place => (\r\n            <PlaceItem\r\n                key={place.id}\r\n                id={place.id}\r\n                image={place.image}\r\n                title={place.title}\r\n                description={place.description}\r\n                address={place.adress}\r\n                creatorId={place.creator}\r\n                coordinates={props.location}\r\n                onDelete = {props.onDeletePlace}\r\n            />\r\n        ))}\r\n    </ul>\r\n\r\n};\r\n\r\nexport default PlaceList; ","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\n// const DUMMY_PLACES = [\r\n//     {\r\n//         id: 'p1',\r\n//         title: 'Empire State Building',\r\n//         description: 'One of the most famous skyscrapers in the world',\r\n//         imageUrl: 'https://www.travelguide.net/media/1440x960/Empire-State-Building-1440x960.avif',\r\n//         adress: 'New York',\r\n//         location: {\r\n//             lat: 40.7484405,\r\n//             lag: -73.9882393\r\n//         },\r\n//         creator: 'u1'\r\n//     },\r\n//     {\r\n\r\n//         id: 'p2',\r\n//         title: 'Emp. State Building',\r\n//         description: 'One of the most famous skyscrapers in the world',\r\n//         imageUrl: 'https://www.travelguide.net/media/1440x960/Empire-State-Building-1440x960.avif',\r\n//         adress: 'New York',\r\n//         location: {\r\n//             lat: 40.7484405,\r\n//             lag: -73.9882393\r\n//         },\r\n//         creator: 'u2'\r\n//     }\r\n// ];\r\n\r\nconst UserPlaces = () => {\r\n    //lect 158\r\n    const [loadedPlaces, setLoadedPlaces] = useState();\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const userId = useParams().userId;\r\n\r\n    useEffect(() => {\r\n        const fetchPlaces = async () => {\r\n            \r\n                try {\r\n\r\n                    const responseData = await sendRequest(\r\n                        `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`,\r\n                       );\r\n                    setLoadedPlaces(responseData.places);\r\n\r\n                } catch (err) {}\r\n            \r\n        };\r\n        fetchPlaces();\r\n    }, [sendRequest, userId])\r\n\r\n    //lect 160 updating place collection by using info from child compounent with help of function\r\n    const placeDeletedHandler = deletedPlaceId => {\r\n        setLoadedPlaces(prevPlaces => \r\n            prevPlaces.filter(place=>place.id !== deletedPlaceId)\r\n        ); \r\n    };\r\n\r\n    // const loadedPlaces = DUMMY_PLACES.filter(place=>place.creator === userId);\r\n    return (\r\n        <>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {isLoading && <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>}\r\n            {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler}/>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default UserPlaces;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`} \n      type={props.type}\n      onClick={props.onClick}\n      // seems like disabled is standard HTML attribute, makes button appear grayed out \n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  \n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css'\r\n\r\nconst ModalOverlay = props => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form onSubmit={\r\n                props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n            } >\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = props => {\r\n    return <React.Fragment>\r\n        {props.show && <Backdrop onClickProp={props.onCancel} />}\r\n        <CSSTransition \r\n            in={props.show}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            timeout={200}\r\n            classNames='modal'>\r\n                <ModalOverlay {...props}/>\r\n        </CSSTransition>\r\n    </React.Fragment>\r\n};\r\n\r\nexport default Modal; ","// lecture 154\r\n\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    // useRef, if page reloded before data is fetched \r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setIsLoading(true);\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortCtrl.signal\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                reqCtrl => reqCtrl !== httpAbortCtrl\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            setIsLoading(false);\r\n            return responseData;\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            throw err;\r\n        }\r\n        \r\n        \r\n    },[]);\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    //useEffect for cleaning smth\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n        };\r\n    },[]);\r\n\r\n    return { isLoading, error, sendRequest, clearError};\r\n};"],"names":["props","_jsx","className","style","isLoading","error","sendRequest","clearError","useHttpClient","auth","useContext","AuthContext","showMap","setShowMap","useState","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","console","log","userId","creatorId","_jsxs","React","children","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","Map","_Fragment","inverse","danger","async","id","Authorization","token","onDelete","err","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","openMapHandler","to","showDeleteWarningHandler","items","length","map","place","PlaceItem","adress","creator","coordinates","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","useEffect","responseData","places","fetchPlaces","PlaceList","deletedPlaceId","prevPlaces","filter","href","size","Link","exact","type","disabled","ModalOverlay","content","headerClass","onSubmit","event","preventDefault","ReactDOM","document","getElementById","Backdrop","onClickProp","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","setIsLoading","setError","activeHttpRequests","useRef","useCallback","url","method","arguments","undefined","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","json","reqCtrl","ok","Error","message","forEach","abortCtrl","abort"],"sourceRoot":""}