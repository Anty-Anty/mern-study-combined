{"version":3,"file":"static/js/220.59bd42a1.chunk.js","mappings":"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","sources":["shared/components/FormElements/Button.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`} \n      type={props.type}\n      onClick={props.onClick}\n      // seems like disabled is standard HTML attribute, makes button appear grayed out \n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, {useRef, useState, useEffect} from \"react\";\r\n\r\nimport Button from './Button'\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const[isValid,setIsValid] = useState(false);\r\n\r\n    //click on and utilize hidden image upload form by clicking on button\r\n    const filePickerRef = useRef();\r\n\r\n    useEffect(()=>{\r\n        if(!file){\r\n            return;\r\n        }\r\n        // api build into browser\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file);\r\n    },[file]);\r\n\r\n    const pickedHandler = event => {\r\n        // event.target.files.length - array, we expect 1 file\r\n        let pickedFile;\r\n        // lect 166 4:30 since setFile will be updated only after compounent re-rander, new var for validation is used \r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1){\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        }else{\r\n            \r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click()\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            {/* //display:'none' make it invisible */}\r\n            <input\r\n                id={props.id}\r\n                ref={filePickerRef}\r\n                style={{ display: 'none' }}\r\n                type=\"file\"\r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\"/>}\r\n                    {!previewUrl && <p>Please pick an image.</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ImageUpload;","import React, { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport './Input.css'\r\n\r\n// the inputReducer function is part of useReducer and outside of compounent because it doesn't \r\n// depend on any compounent input\r\n\r\n// action is an object that describes the type of change to be made and includes any relevant \r\n// data for the update. action object is declared in dispatch function\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                // validation happens here. input value is chacked against specified in props validator type (e.g.VALIDATOR_REQUIRE())\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nconst Input = props => {\r\n\r\n    // useReducer:\r\n    const [inputState, dispatch] = useReducer(inputReducer, { \r\n        //initial value is provided with props, if not then empty string\r\n        value: props.initialValue || '', \r\n        isTouched: false,\r\n        // isValid would be false for NewPlace.js and it would have prop for UpdatePlace.js\r\n        isValid: props.initialValid || false \r\n    });\r\n\r\n    // lesson 63: adding useEffect\r\n\r\n    // deconstruct object and get values to use them as dependencies in useEffect\r\n    // deconstruction is needed because we don't want to track all props, but only sertain parameters\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState; \r\n\r\n    useEffect(() => {\r\n        // onInput forwards input by user informatopn to NewPlace.js \r\n        onInput (id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    // end 63\r\n\r\n    // functions changeHandler and touchHandler are part of useReducer, each of them trigered when input happens\r\n    const changeHandler = event => {\r\n        dispatch({\r\n            type: 'CHANGE',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        })\r\n    };\r\n\r\n    // FIRST. element constant give us a choice between input or textarea\r\n    const element = props.element === 'input' ? (\r\n        <input\r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value}\r\n        />\r\n    ) : (\r\n        <textarea\r\n            id={props.id}\r\n            rows={props.rows || 3}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input; \r\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  \n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css'\r\n\r\nconst ModalOverlay = props => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form onSubmit={\r\n                props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n            } >\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = props => {\r\n    return <React.Fragment>\r\n        {props.show && <Backdrop onClickProp={props.onCancel} />}\r\n        <CSSTransition \r\n            in={props.show}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            timeout={200}\r\n            classNames='modal'>\r\n                <ModalOverlay {...props}/>\r\n        </CSSTransition>\r\n    </React.Fragment>\r\n};\r\n\r\nexport default Modal; ","// we keep here all useReducer logic which was set up in NewPlace initially.\r\n\r\nimport { useCallback, useReducer } from \"react\";\r\n\r\n// lecture 64 useReducer\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                //authorisation (fix the issue of switching modes)\r\n                if(!state.inputs[inputId]){\r\n                    continue;\r\n                }\r\n                // if any \r\n                if (inputId === action.inputId) {\r\n                    // formIsValid(1) = formIsValid(2) && action.isValid . formIsValid(2) makes sure that action.isValid has the same value with formIsValid(1), therefore 'true'.\r\n                    //otherwise without formIsValid(2), would have been equal to action.isValid\r\n                    // later if inputs.isValid is true then formState.isValid is true and button stops been disabled\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n// lecture 70 SET_DATA to udate dummy data in UpdatePlace.js after information recived from data base\r\n        case 'SET_DATA':\r\n            return {\r\n                // previous state is not copied, but replaced entirly\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    \r\n    // lesson 63, functions are passed to Input.js \r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n     // useCallback with empty [] dependencies, means that when componenet function rerenders, \r\n    // this function is reused and not rerenders\r\n      // useCallback An empty array ([]) means the function will only be created once (on initial render).\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n\r\n        });\r\n    }, []);\r\n\r\n    // lecture 70 adding function to deal with posible delay in requesting information from database\r\n    // useCallback An empty array ([]) means the function will only be created once (on initial render).\r\n    const setFormData = useCallback((inputData, formValidity)=>{\r\n        dispatch({\r\n            type:'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    },[]);\r\n\r\n    return [formState, inputHandler, setFormData]\r\n};","// lecture 154\r\n\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    // useRef, if page reloded before data is fetched \r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setIsLoading(true);\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortCtrl.signal\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                reqCtrl => reqCtrl !== httpAbortCtrl\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            setIsLoading(false);\r\n            return responseData;\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            throw err;\r\n        }\r\n        \r\n        \r\n    },[]);\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    //useEffect for cleaning smth\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n        };\r\n    },[]);\r\n\r\n    return { isLoading, error, sendRequest, clearError};\r\n};","// constants diclared in order for values to be reusable in part 1 and part 2\n\nconst VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\n// part 1 is called in parent component which calls reusable component (NewPlace - parant, Input - reusable etc.)\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\n// part 2 is called in reusable components like 'Input'\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const auth = useContext(AuthContext);\r\n    // state to switch to signUP\r\n\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n    //lecture 150\r\n    // managed by http-hook.js\r\n    // const [isLoading, setIsLoading] = useState(false);\r\n    // const [error, setError] = useState();\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        email: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        password: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n    }, false);\r\n\r\n    const switchModeHandler = () => {\r\n        if (!isLoginMode) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    image: undefined\r\n                },\r\n                formState.inputs.email.isValid && formState.inputs.password.isValid\r\n            );\r\n        } else {\r\n            setFormData({\r\n                ...formState.inputs,\r\n                name: {\r\n                    value: '',\r\n                    isValid: false\r\n                },\r\n                image: {\r\n                    value: null,\r\n                    isValid: false\r\n                }\r\n            },\r\n                false\r\n            );\r\n        }\r\n        setIsLoginMode(prevMode => !prevMode);\r\n    };\r\n\r\n    //lecture 147\r\n    const authSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        console.log(formState.inputs);\r\n\r\n        // managed by http-hook.js\r\n        // setIsLoading(true);\r\n\r\n        if (isLoginMode) {\r\n            //LOGIN\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL+'/users/login',\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value\r\n                    }),\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) {\r\n\r\n            }\r\n\r\n            //SIGN UP\r\n        } else {\r\n            try {\r\n                // lect 169 images are binary data and can't be processed by JSON\r\n                const formData = new FormData();\r\n                formData.append('email', formState.inputs.email.value);\r\n                formData.append('name', formState.inputs.name.value);\r\n                formData.append('password', formState.inputs.password.value);\r\n                formData.append('image', formState.inputs.image.value);\r\n\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL+'/users/signup',\r\n                    'POST',\r\n                    formData,\r\n                    // JSON.stringify({\r\n                    //     name: formState.inputs.name.value,\r\n                    //     email: formState.inputs.email.value,\r\n                    //     password: formState.inputs.password.value\r\n                    // }),\r\n                    // {\r\n                    //     'Content-Type': 'application/json'\r\n                    // }\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\nconsole.log(\"User ID on login:\", responseData.userId);\r\n            } catch (err) {\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* lecture 151 */}\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <Card className='authentication'>\r\n                {/* lecture 150 */}\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <h2>Login Required</h2>\r\n                <hr />\r\n                <form onSubmit={authSubmitHandler}>\r\n                    {!isLoginMode && (\r\n                        <Input\r\n                            element='input'\r\n                            id='name'\r\n                            type='text'\r\n                            label='Your Name'\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText='Please enter a name.'\r\n                            onInput={inputHandler}\r\n                        />\r\n                    )}\r\n                    {!isLoginMode &&\r\n                        <ImageUpload\r\n                            center id=\"image\"\r\n                            onInput={inputHandler}\r\n                            errorText=\"Please provide an image.\"\r\n                        />}\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        label=\"E-mail\"\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorText=\"Please enter a valid email address.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        errorText=\"Please enter a valid password, at least 6 characters.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n                    </Button>\r\n                </form>\r\n                {/* button to switch to signUP */}\r\n                <Button inverse onClick={switchModeHandler}>SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}</Button>\r\n            </Card>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Auth;"],"names":["props","href","_jsx","className","size","inverse","danger","children","to","Link","exact","type","onClick","disabled","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","id","ref","style","display","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","pickImageHandler","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","Modal","onCancel","onClear","header","show","error","footer","ModalOverlay","content","headerClass","onSubmit","preventDefault","contentClass","footerClass","ReactDOM","document","getElementById","React","Backdrop","onClickProp","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","useHttpClient","isLoading","setIsLoading","setError","activeHttpRequests","sendRequest","async","url","method","arguments","undefined","body","headers","httpAbortCtrl","AbortController","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","forEach","abortCtrl","abort","clearError","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","inputHandler","setFormData","email","password","_Fragment","ErrorModal","Card","LoadingSpinner","asOverlay","console","log","process","JSON","stringify","login","userId","token","formData","FormData","append","name","image","Input","ImageUpload","switchModeHandler","prevMode"],"sourceRoot":""}