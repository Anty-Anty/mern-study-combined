{"version":3,"file":"static/js/981.e7e49cd4.chunk.js","mappings":"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","sources":["places/pages/NewPlace.js","shared/components/FormElements/Button.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/validators.js"],"sourcesContent":["// lecture 63 new hook useCallback to avoid infinite loop made by titleInputHandler function\r\nimport React, { useContext } from \"react\";\r\n// import { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\r\n//lecture 68\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport './PlaceForm.css';\r\n\r\n\r\nconst NewPlace = () => {\r\n    const auth = useContext(AuthContext);\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    // destructuring array to get formState and inputHandler function from useForm custom hook\r\n    const [formState, inputHandler] = useForm({\r\n        // first argument for a custom hook useForm function\r\n        title: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        description: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        address: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        image: {\r\n            value: null,\r\n            isValid: false\r\n        }\r\n    },\r\n        // second argument for a custom hook useForm function\r\n        false);\r\n\r\n    const history = useHistory();\r\n\r\n    const placeSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('title', formState.inputs.title.value);\r\n            formData.append('description', formState.inputs.description.value);\r\n            formData.append('address', formState.inputs.address.value);\r\n            formData.append('creator', auth.userId);\r\n            formData.append('image', formState.inputs.image.value);\r\n\r\n            await sendRequest(\r\n                process.env.REACT_APP_BACKEND_URL+'/places',\r\n                'POST',\r\n                formData,\r\n                //lect 183\r\n                {Authorization: 'Bearer ' + auth.token}\r\n                // JSON.stringify({\r\n                // title: formState.inputs.title.value,\r\n                // description: formState.inputs.description.value,\r\n                // address: formState.inputs.address.value,\r\n                // // lecture 157 (long explanation how to get userId by using Context)\r\n                // creator: auth.userId\r\n                // }),\r\n                // { 'Content-Type': 'application/json' }\r\n                );\r\n                // console.log(formState.inputs)\r\n            history.push('/');\r\n        } catch (err) {\r\n\r\n        }\r\n\r\n    };\r\n    // end 63\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <form className='place-form' onSubmit={placeSubmitHandler}>\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <Input\r\n                    id='title'\r\n                    element='input'\r\n                    type='text'\r\n                    label='Title'\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText='Please enter a valid title.'\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    id='description'\r\n                    element='textarea'\r\n                    label='Description'\r\n                    validators={[VALIDATOR_MINLENGTH(5)]}\r\n                    errorText='Please enter a valid description (at least 5 characters).'\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    id='address'\r\n                    element='input'\r\n                    label='Address'\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText='Please enter a valid adress.'\r\n                    onInput={inputHandler}\r\n                />\r\n                <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\" />\r\n                <Button type='submit' disabled={!formState.isValid}>\r\n                    ADD PLACE\r\n                </Button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewPlace;\r\n\r\n//my own research on how this works\r\n\r\n// return {\r\n//     ...state,\r\n//     inputs: {\r\n//         ...state.inputs,\r\n//         [action.inputId]: { value: action.value, isValid: action.isValid }\r\n//     },\r\n//     isValid: formIsValid\r\n// };\r\n\r\n// ------------------------\r\n\r\n// const obj = {\r\n//     val:{\r\n//         a:{z:1,y:2},\r\n//         b:{z:3,y:4}\r\n//     }\r\n// };\r\n\r\n// const newObj = {\r\n//     ...obj,\r\n//     val:{\r\n//         ...obj.val,\r\n//         // 'a' needs to be in quotes to make it work\r\n//         ['a']:{z:9,y:8}\r\n//     }\r\n// }\r\n\r\n// console.log (newObj)","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`} \n      type={props.type}\n      onClick={props.onClick}\n      // seems like disabled is standard HTML attribute, makes button appear grayed out \n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, {useRef, useState, useEffect} from \"react\";\r\n\r\nimport Button from './Button'\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const[isValid,setIsValid] = useState(false);\r\n\r\n    //click on and utilize hidden image upload form by clicking on button\r\n    const filePickerRef = useRef();\r\n\r\n    useEffect(()=>{\r\n        if(!file){\r\n            return;\r\n        }\r\n        // api build into browser\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file);\r\n    },[file]);\r\n\r\n    const pickedHandler = event => {\r\n        // event.target.files.length - array, we expect 1 file\r\n        let pickedFile;\r\n        // lect 166 4:30 since setFile will be updated only after compounent re-rander, new var for validation is used \r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1){\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        }else{\r\n            \r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click()\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            {/* //display:'none' make it invisible */}\r\n            <input\r\n                id={props.id}\r\n                ref={filePickerRef}\r\n                style={{ display: 'none' }}\r\n                type=\"file\"\r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\"/>}\r\n                    {!previewUrl && <p>Please pick an image.</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ImageUpload;","import React, { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport './Input.css'\r\n\r\n// the inputReducer function is part of useReducer and outside of compounent because it doesn't \r\n// depend on any compounent input\r\n\r\n// action is an object that describes the type of change to be made and includes any relevant \r\n// data for the update. action object is declared in dispatch function\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                // validation happens here. input value is chacked against specified in props validator type (e.g.VALIDATOR_REQUIRE())\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nconst Input = props => {\r\n\r\n    // useReducer:\r\n    const [inputState, dispatch] = useReducer(inputReducer, { \r\n        //initial value is provided with props, if not then empty string\r\n        value: props.initialValue || '', \r\n        isTouched: false,\r\n        // isValid would be false for NewPlace.js and it would have prop for UpdatePlace.js\r\n        isValid: props.initialValid || false \r\n    });\r\n\r\n    // lesson 63: adding useEffect\r\n\r\n    // deconstruct object and get values to use them as dependencies in useEffect\r\n    // deconstruction is needed because we don't want to track all props, but only sertain parameters\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState; \r\n\r\n    useEffect(() => {\r\n        // onInput forwards input by user informatopn to NewPlace.js \r\n        onInput (id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    // end 63\r\n\r\n    // functions changeHandler and touchHandler are part of useReducer, each of them trigered when input happens\r\n    const changeHandler = event => {\r\n        dispatch({\r\n            type: 'CHANGE',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        })\r\n    };\r\n\r\n    // FIRST. element constant give us a choice between input or textarea\r\n    const element = props.element === 'input' ? (\r\n        <input\r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value}\r\n        />\r\n    ) : (\r\n        <textarea\r\n            id={props.id}\r\n            rows={props.rows || 3}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input; \r\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css'\r\n\r\nconst ModalOverlay = props => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form onSubmit={\r\n                props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n            } >\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = props => {\r\n    return <React.Fragment>\r\n        {props.show && <Backdrop onClickProp={props.onCancel} />}\r\n        <CSSTransition \r\n            in={props.show}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            timeout={200}\r\n            classNames='modal'>\r\n                <ModalOverlay {...props}/>\r\n        </CSSTransition>\r\n    </React.Fragment>\r\n};\r\n\r\nexport default Modal; ","// we keep here all useReducer logic which was set up in NewPlace initially.\r\n\r\nimport { useCallback, useReducer } from \"react\";\r\n\r\n// lecture 64 useReducer\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                //authorisation (fix the issue of switching modes)\r\n                if(!state.inputs[inputId]){\r\n                    continue;\r\n                }\r\n                // if any \r\n                if (inputId === action.inputId) {\r\n                    // formIsValid(1) = formIsValid(2) && action.isValid . formIsValid(2) makes sure that action.isValid has the same value with formIsValid(1), therefore 'true'.\r\n                    //otherwise without formIsValid(2), would have been equal to action.isValid\r\n                    // later if inputs.isValid is true then formState.isValid is true and button stops been disabled\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n// lecture 70 SET_DATA to udate dummy data in UpdatePlace.js after information recived from data base\r\n        case 'SET_DATA':\r\n            return {\r\n                // previous state is not copied, but replaced entirly\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    \r\n    // lesson 63, functions are passed to Input.js \r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n     // useCallback with empty [] dependencies, means that when componenet function rerenders, \r\n    // this function is reused and not rerenders\r\n      // useCallback An empty array ([]) means the function will only be created once (on initial render).\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n\r\n        });\r\n    }, []);\r\n\r\n    // lecture 70 adding function to deal with posible delay in requesting information from database\r\n    // useCallback An empty array ([]) means the function will only be created once (on initial render).\r\n    const setFormData = useCallback((inputData, formValidity)=>{\r\n        dispatch({\r\n            type:'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    },[]);\r\n\r\n    return [formState, inputHandler, setFormData]\r\n};","// lecture 154\r\n\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    // useRef, if page reloded before data is fetched \r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setIsLoading(true);\r\n        const httpAbortCtrl = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortCtrl);\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortCtrl.signal\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n                reqCtrl => reqCtrl !== httpAbortCtrl\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(responseData.message);\r\n            }\r\n\r\n            setIsLoading(false);\r\n            return responseData;\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            throw err;\r\n        }\r\n        \r\n        \r\n    },[]);\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    //useEffect for cleaning smth\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\r\n        };\r\n    },[]);\r\n\r\n    return { isLoading, error, sendRequest, clearError};\r\n};","// constants diclared in order for values to be reusable in part 1 and part 2\n\nconst VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\n// part 1 is called in parent component which calls reusable component (NewPlace - parant, Input - reusable etc.)\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\n// part 2 is called in reusable components like 'Input'\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["NewPlace","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","formState","inputHandler","useForm","title","value","isValid","description","address","image","history","useHistory","_jsxs","_Fragment","children","_jsx","ErrorModal","onClear","className","onSubmit","async","event","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","err","LoadingSpinner","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","ImageUpload","Button","disabled","props","href","size","inverse","danger","to","Link","exact","onClick","file","setFile","useState","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","pickedFile","fileIsValid","target","files","length","center","src","alt","pickImageHandler","current","click","inputReducer","state","action","val","validate","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","placeholder","onBlur","rows","htmlFor","Modal","onCancel","header","show","footer","ModalOverlay","content","headerClass","contentClass","footerClass","ReactDOM","document","getElementById","React","Backdrop","onClickProp","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","setIsLoading","setError","activeHttpRequests","url","method","arguments","undefined","body","headers","httpAbortCtrl","AbortController","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","forEach","abortCtrl","abort","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","test"],"sourceRoot":""}